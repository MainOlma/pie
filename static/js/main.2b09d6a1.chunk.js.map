{"version":3,"sources":["Triangle.js","App.js","serviceWorker.js","index.js"],"names":["Triangle","props","svg_ref","React","createRef","_useState","useState","_useState2","Object","slicedToArray","render","setRender","useEffect","console","log","data","length","fills","draw","svg","d3","current","nested","key","d","rollup","entries","sort","a","b","value","popular_fills_names","slice","map","forEach","mod_fill_1","includes","fill_1","mod_fill_2","fill_2","filter","el","push","table","g_lines","append","attr","g_texts","i","xx","text","classed","_loop","j","filter2","count","hor_gap","selectAll","on","selectedFill","this","react_default","createElement","className","ref","width","height","App","pieContainer_ref","setData","_useState3","_useState4","setFills","_useState5","_useState6","setSelectedFill","then","raw_data","parseDate","mydata","replace","id","name","date","alec","crust","drawListOfPies","pie_container","format","nested_by_date","month_div","enter","formatMonth","parseTime","values","e","activeClass","html","style","node","getBoundingClientRect","left","top","remove","f1","f2","src_Triangle","href","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b09d6a1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction Triangle(props) {\r\n    function onlyUnique(value, index, self) {\r\n        return self.indexOf(value) === index;\r\n    }\r\n    let svg_ref = React.createRef();\r\n\r\n    const [render,setRender] = useState(0)\r\n    useEffect(() => {\r\n        console.log(props.data.length,props.fills.length,render,\"hook\")\r\n        if( props.data.length!=0 && props.fills.length!=0 && render==0) draw()\r\n    },)\r\n\r\n\r\n    /*\r\n        //d3.csv(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTT_w_1rgvRuiIkhgZ7GGjhWdxNTY2zuFEsuT7AtK80ryUlPZMN96ROjIljXTAewLEm6CClM5HwIiFv/pub?gid=0&single=true&output=csv\").then(function (data) {\r\n            console.log(\"raw data: \", data); //\r\n\r\n            const fills = [];\r\n            const parseDate = d3.timeParse(\"%Y-%m-%d\");\r\n\r\n            let mydata = data.map((el, i) => {\r\n\r\n                const fill_1 = (el['primary filling'] != \"\") ? el['primary filling'].replace(\" \", \"_\") : \"None\",\r\n                    fill_2 = (el['secondary filling'] != \"\") ? el['secondary filling'].replace(\" \", \"_\") : \"None\"\r\n\r\n                fills.push(fill_1)\r\n                fills.push(fill_2)\r\n\r\n                return {\r\n                    id: i,\r\n                    name: el['Pie'],\r\n                    date: parseDate(el['Date served']),\r\n                    alec: el['alec will eat it'],\r\n                    crust: (el['one-crust'] && !el['two crust']) ? 1 : 2,\r\n                    fill_1: fill_1,\r\n                    fill_2: fill_2\r\n                }\r\n            })\r\n\r\n\r\n            const pie_container = d3.select(\"#root\").append(\"div\").classed(\"pie_container\", true)\r\n\r\n            function drawListOfPies() {\r\n\r\n                const format = d3.timeFormat(\"%Y %B\");\r\n\r\n                const nested_by_date = d3.nest().key(d => {\r\n                    return format(d.date);\r\n                }).entries(mydata)\r\n\r\n                console.log(\"pie by date\", nested_by_date)\r\n\r\n                const month_div = pie_container.selectAll(\"div\").data(nested_by_date).enter().append(\"div\")\r\n\r\n                month_div.append(\"div\").classed(\"month_name\", true)\r\n                    .text((d) => {\r\n                        const formatMonth = d3.timeFormat(\"%Y %B\")\r\n                        const parseTime = d3.timeParse(\"%Y %B\")\r\n                        const month = formatMonth(parseTime(d.key))\r\n                        return month\r\n                    })\r\n\r\n                month_div.selectAll(\"div.pie\").data(d => d.values).enter().append(\"span\").classed(\"pie\", true)\r\n                    .text((e) => {\r\n                        return e.name\r\n                    })\r\n                    .attr(\"class\", (d) => \"pie \" + d.fill_1 + \" \" + d.fill_2 + \" \" + d.mod_fill_1 + \" \" + d.mod_fill_2)\r\n                    .on(\"mouseover\", showDetail)\r\n                    .on(\"mouseout\", hideDetail)\r\n\r\n                function showDetail(d) {\r\n                    d3.select(\"#root\").append(\"div\").classed(\"tooltip\", true)\r\n                        .html(\"crust: \" + d.crust + \"<br>\"\r\n                            + \"alec: \" + d.alec + \"<br>\"\r\n                            + \"fill 1: \" + d.fill_1 + \"<br>\"\r\n                            + \"fill 2: \" + d.fill_2 + \"<br>\")\r\n                        .style(\"left\", d3.select(this).node().getBoundingClientRect().left + \"px\")\r\n                        .style(\"top\", d3.select(this).node().getBoundingClientRect().top + 20 + \"px\")\r\n                }\r\n\r\n                function hideDetail(d) {\r\n                    d3.select(\"#root .tooltip\").remove()\r\n                }\r\n            }\r\n\r\n\r\n            const nested = d3.nest().key(d => d).rollup(d => d.length).entries(fills)\r\n                .sort((a, b) => d3.descending(a.value, b.value));\r\n\r\n            const popular_fills = nested.slice(0, 7)\r\n            let popular_fills_names = popular_fills.map(d => d.key)\r\n\r\n            const other_fills = nested.slice(8)\r\n            const other_fills_names = other_fills.map(d => d.key)\r\n\r\n\r\n            mydata.forEach((d) => {\r\n                d.mod_fill_1 = (!popular_fills_names.includes(d.fill_1)) ? \"Other\" : d.fill_1\r\n                d.mod_fill_2 = (!popular_fills_names.includes(d.fill_2)) ? \"Other\" : d.fill_2\r\n            })\r\n\r\n            popular_fills_names = popular_fills_names.filter(el => el != \"None\")\r\n\r\n            console.log(\"replaced with other\", mydata)\r\n\r\n            popular_fills_names.push(\"Other\")\r\n\r\n            drawListOfPies()\r\n\r\n            const table = []\r\n            let svg = d3.select(\"#root\").append(\"svg\")\r\n            svg.attr(\"width\", 500).attr(\"height\", 800)\r\n            const g_lines = svg.append(\"g\").attr(\"class\", \"lines\"),\r\n                g_texts = svg.append(\"g\").attr(\"class\", \"texts\")\r\n\r\n            popular_fills_names.forEach((fill_1, i) => {\r\n\r\n                let xx = 0\r\n\r\n                svg.append(\"text\").attr(\"x\", xx * 20).attr(\"y\", i * 40 + 20).text(fill_1).classed(fill_1, true)\r\n\r\n                for (var j = i; j <= popular_fills_names.length - 1; j++) {\r\n\r\n                    const fill_2 = popular_fills_names[j]\r\n                    xx++\r\n\r\n                    let filter = mydata.filter(el => ((el.mod_fill_1 == fill_1 && el.mod_fill_2 == fill_2) || (el.mod_fill_1 == fill_1 && el.mod_fill_2 == \"None\" && fill_1 == fill_2)))\r\n                    let filter2 = mydata.filter(el => ((el.mod_fill_2 == fill_1 && el.mod_fill_1 == fill_2 && fill_1 != fill_2)))\r\n\r\n                    g_texts.append(\"circle\")\r\n                        .attr(\"r\", 10)\r\n                        .attr(\"cx\", xx * 20 + 60 + 5)\r\n                        .attr(\"cy\", i * 20 + j * 20 + 20 - 5)\r\n                        .attr(\"fill\", \"white\")\r\n\r\n                    g_texts.append(\"text\")\r\n                        .attr(\"x\", xx * 20 + 60)\r\n                        .attr(\"y\", i * 20 + j * 20 + 20)\r\n                        .text(filter.length + filter2.length)\r\n                        .classed(\"row_\" + fill_1, true)\r\n                        .classed(\"col_\" + fill_2, true)\r\n\r\n                    table.push({\r\n                            fill_1: fill_1,\r\n                            fill_2: fill_2,\r\n                            count: filter.length + filter2.length\r\n                        }\r\n                    )\r\n                }\r\n\r\n                g_lines.append(\"line\")\r\n                    .attr(\"x1\", 85)\r\n                    .attr(\"y1\", i * 40 + 15)\r\n                    .attr(\"x2\", xx * 20 + 85 - 15)\r\n                    .attr(\"y2\", i * 20 + j * 20)\r\n                    .attr(\"stroke\", \"green\")\r\n                    .attr(\"class\", fill_1)\r\n\r\n                g_lines.append(\"line\")\r\n                    .attr(\"x1\", 85)\r\n                    .attr(\"y1\", i * 40 + 15)\r\n                    .attr(\"x2\", (i) * 20 + 85)\r\n                    .attr(\"y2\", i * 40 + 15 - (7 - xx) * 20)\r\n                    .attr(\"stroke\", \"blue\")\r\n                    .attr(\"class\", fill_1)\r\n\r\n            })\r\n            popular_fills_names.forEach((fill_1, i) => {\r\n                console.log(fill_1)\r\n                svg.selectAll(\"text.\" + fill_1).on(\"mouseover\", function () {\r\n\r\n                    console.log(\"hover\", d3.select(this).attr(\"class\"))\r\n\r\n                    svg.selectAll(\"text\").attr(\"fill\", \"black\")\r\n                    d3.select(this).attr(\"fill\", \"red\")\r\n\r\n                    svg.selectAll(\"text.col_\" + d3.select(this).attr(\"class\")).attr(\"fill\", \"red\")\r\n                    svg.selectAll(\"text.row_\" + d3.select(this).attr(\"class\")).attr(\"fill\", \"red\")\r\n\r\n                    g_lines.selectAll(\"line\").attr(\"stroke-width\", 1)\r\n                    g_lines.selectAll(\"line.\" + d3.select(this).attr(\"class\")).attr(\"stroke-width\", 4)\r\n\r\n                    pie_container.selectAll(\"span\").style(\"color\", \"black\")\r\n\r\n                    pie_container.selectAll(\"span.\" + d3.select(this).attr(\"class\")).style(\"color\", \"red\")\r\n\r\n                })\r\n                    .on(\"mouseout\", function () {\r\n                        svg.selectAll(\"text\").attr(\"fill\", \"black\")\r\n                        g_lines.selectAll(\"line\").attr(\"stroke-width\", 1)\r\n                        pie_container.selectAll(\"span\").style(\"color\", \"black\")\r\n\r\n                    })\r\n            })\r\n\r\n            console.log(\"working array\", mydata)\r\n            console.log(\"nest\", nested)\r\n            console.log(\"table\", table)\r\n\r\n    */\r\n    //});\r\n\r\n    const draw = () =>{\r\n        let svg = d3.select(svg_ref.current)\r\n        console.log(svg,svg_ref)\r\n\r\n        const data=props.data,\r\n            fills=props.fills\r\n\r\n        const nested = d3.nest().key(d => d).rollup(d => d.length).entries(fills)\r\n            .sort((a, b) => d3.descending(a.value, b.value));\r\n\r\n        const popular_fills = nested.slice(0, 7)\r\n        let popular_fills_names = popular_fills.map(d => d.key)\r\n\r\n        const other_fills = nested.slice(8)\r\n        const other_fills_names = other_fills.map(d => d.key)\r\n\r\n\r\n        data.forEach((d) => {\r\n            d.mod_fill_1 = (!popular_fills_names.includes(d.fill_1)) ? \"Other\" : d.fill_1\r\n            d.mod_fill_2 = (!popular_fills_names.includes(d.fill_2)) ? \"Other\" : d.fill_2\r\n        })\r\n\r\n        popular_fills_names = popular_fills_names.filter(el => el != \"None\")\r\n\r\n        //console.log(\"replaced with other\", mydata)\r\n\r\n        popular_fills_names.push(\"Other\")\r\n\r\n        //drawListOfPies()\r\n\r\n        const table = []\r\n        //let svg = d3.select(\"#root\").append(\"svg\")\r\n        //svg.attr(\"width\", 500).attr(\"height\", 500)\r\n        const g_lines = svg.append(\"g\").attr(\"class\", \"lines\"),\r\n            g_texts = svg.append(\"g\").attr(\"class\", \"texts\")\r\n\r\n        popular_fills_names.forEach((fill_1, i) => {\r\n\r\n            let xx = 0\r\n\r\n\r\n            const hor_gap = 100,\r\n                hor_gap_line = hor_gap + 25,\r\n                start_y = 25\r\n\r\n            svg.append(\"text\").attr(\"x\", xx * 20).attr(\"y\", i * 40 + start_y).text(fill_1).classed(fill_1, true)\r\n\r\n            for (var j = i; j <= popular_fills_names.length - 1; j++) {\r\n\r\n                const fill_2 = popular_fills_names[j]\r\n                xx++\r\n\r\n                let filter = data.filter(el => ((el.mod_fill_1 == fill_1 && el.mod_fill_2 == fill_2) || (el.mod_fill_1 == fill_1 && el.mod_fill_2 == \"None\" && fill_1 == fill_2)))\r\n                let filter2 = data.filter(el => ((el.mod_fill_2 == fill_1 && el.mod_fill_1 == fill_2 && fill_1 != fill_2)))\r\n\r\n\r\n\r\n                g_texts.append(\"circle\")\r\n                    .attr(\"r\", (d)=>(filter.length + filter2.length>0) ? 8 : 0)\r\n                    .attr(\"cx\", xx * 20 + hor_gap + 5)\r\n                    .attr(\"cy\", i * 20 + j * 20 + start_y - 5)\r\n                    .classed( fill_1, true)\r\n                    .classed( fill_2, true)\r\n\r\n                g_texts.append(\"text\")\r\n                    .attr(\"x\", xx * 20 + hor_gap + 5)\r\n                    .attr(\"y\", i * 20 + j * 20 + start_y)\r\n                    .text(()=> (filter.length + filter2.length>0) ? filter.length + filter2.length : \"\")\r\n                    .classed(\"row_\" + fill_1, true)\r\n                    .classed(\"col_\" + fill_2, true)\r\n\r\n                table.push({\r\n                        fill_1: fill_1,\r\n                        fill_2: fill_2,\r\n                        count: filter.length + filter2.length\r\n                    }\r\n                )\r\n            }\r\n\r\n            g_lines.append(\"line\")\r\n                .attr(\"x1\", hor_gap_line)\r\n                .attr(\"y1\", i * 40 + 20)\r\n                .attr(\"x2\", xx * 20 + hor_gap_line - 15-5)\r\n                .attr(\"y2\", i * 20 + j * 20-5+5)\r\n                .attr(\"stroke\", \"green\")\r\n                .attr(\"class\", fill_1)\r\n\r\n            g_lines.append(\"line\")\r\n                .attr(\"x1\", hor_gap_line)\r\n                .attr(\"y1\", i * 40 + 20)\r\n                .attr(\"x2\", (i) * 20 + hor_gap_line)\r\n                .attr(\"y2\", i * 40 + 20 - (7 - xx) * 20)\r\n                .attr(\"stroke\", \"blue\")\r\n                .attr(\"class\", fill_1)\r\n\r\n        })\r\n        popular_fills_names.forEach((fill_1, i) => {\r\n            console.log(fill_1)\r\n            svg.selectAll(\"text.\" + fill_1).on(\"mouseover\", function () {\r\n\r\n                const selectedFill=d3.select(this).attr(\"class\")\r\n\r\n                props.selectedFill(selectedFill)\r\n\r\n                svg.selectAll(\"text\").classed(\"hovered\", false)\r\n                d3.select(this).classed(\"hovered\", true)\r\n\r\n                svg.selectAll(\"text.col_\" + selectedFill).classed(\"hovered\", true)\r\n                svg.selectAll(\"text.row_\" + selectedFill).classed(\"hovered\", true)\r\n\r\n                g_lines.selectAll(\"line\").classed(\"hovered\", false)\r\n                g_lines.selectAll(\"line.\" + selectedFill).classed(\"hovered\", true)\r\n\r\n                g_texts.selectAll(\"circle\").classed(\"hovered\", false)\r\n                g_texts.selectAll(\"circle.\" + selectedFill).classed(\"hovered\", true)\r\n\r\n                //pie_container.selectAll(\"span\").style(\"color\", \"black\")\r\n\r\n                //pie_container.selectAll(\"span.\" + d3.select(this).attr(\"class\")).style(\"color\", \"red\")\r\n\r\n            })\r\n                .on(\"mouseout\", function () {\r\n                    props.selectedFill(\"none\")\r\n                    svg.selectAll(\"text\").classed(\"hovered\", false)\r\n                    g_lines.selectAll(\"line\").classed(\"hovered\", false)\r\n                    g_texts.selectAll(\"circle\").classed(\"hovered\", false)\r\n                   // pie_container.selectAll(\"span\").style(\"color\", \"black\")\r\n\r\n                })\r\n        })\r\n\r\n        setRender(1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"triangle\">\r\n            <h3>Filling filter</h3>\r\n            <svg ref={svg_ref} width={260} height={300}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Triangle;\r\n","import React, {useState, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport './App.css';\nimport Triangle from \"./Triangle\";\n\nfunction App() {\n    function onlyUnique(value, index, self) {\n        return self.indexOf(value) === index;\n    }\n\n    const pieContainer_ref = React.createRef()\n\n    const [data, setData] = useState([]);\n    const [fills, setFills] = useState([]);\n    const [selectedFill, setSelectedFill] = useState(\"none\")\n\n    useEffect(() => {\n\n        const fetchData = () => {\n            d3.csv(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTT_w_1rgvRuiIkhgZ7GGjhWdxNTY2zuFEsuT7AtK80ryUlPZMN96ROjIljXTAewLEm6CClM5HwIiFv/pub?gid=0&single=true&output=csv\").then(function (raw_data) {\n                const fills = [];\n                const parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n                let mydata = raw_data.map((el, i) => {\n\n                    const fill_1 = (el['primary filling'] != \"\") ? el['primary filling'].replace(\" \", \"_\") : \"None\",\n                        fill_2 = (el['secondary filling'] != \"\") ? el['secondary filling'].replace(\" \", \"_\") : \"None\"\n\n                    fills.push(fill_1)\n                    fills.push(fill_2)\n\n                    return {\n                        id: i,\n                        name: el['Pie'],\n                        date: parseDate(el['Date served']),\n                        alec: el['alec will eat it'],\n                        crust: (el['one-crust'] && !el['two crust']) ? 1 : 2,\n                        fill_1: fill_1,\n                        fill_2: fill_2\n                    }\n                })\n                const nested = d3.nest().key(d => d).rollup(d => d.length).entries(fills)\n                    .sort((a, b) => d3.descending(a.value, b.value));\n\n                const popular_fills = nested.slice(0, 7)\n                let popular_fills_names = popular_fills.map(d => d.key)\n\n                mydata.forEach((d) => {\n                    d.mod_fill_1 = (!popular_fills_names.includes(d.fill_1)) ? \"Other\" : d.fill_1\n                    d.mod_fill_2 = (!popular_fills_names.includes(d.fill_2)) ? \"Other\" : d.fill_2\n                })\n                setData(mydata)\n                setFills(fills)\n\n\n            })\n\n        }\n\n        fetchData();\n\n    }, []);\n\n    useEffect(() => {\n        drawListOfPies(data);\n    })\n\n    useEffect(()=>{\n\n\n        if (selectedFill===\"none\") d3.selectAll(\"span.pie\").classed(\"activeItem\",true).classed(\"unactiveItem\",false)\n        else {\n            d3.selectAll(\"span.pie\").classed(\"unactiveItem\",true)\n            d3.selectAll(\"span.pie.\"+selectedFill).classed(\"unactiveItem\",false)\n        }\n    })\n\n/*\n    //d3.csv(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTT_w_1rgvRuiIkhgZ7GGjhWdxNTY2zuFEsuT7AtK80ryUlPZMN96ROjIljXTAewLEm6CClM5HwIiFv/pub?gid=0&single=true&output=csv\").then(function (data) {\n        console.log(\"raw data: \", data); //\n\n        const fills = [];\n        const parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n        let mydata = data.map((el, i) => {\n\n            const fill_1 = (el['primary filling'] != \"\") ? el['primary filling'].replace(\" \", \"_\") : \"None\",\n                fill_2 = (el['secondary filling'] != \"\") ? el['secondary filling'].replace(\" \", \"_\") : \"None\"\n\n            fills.push(fill_1)\n            fills.push(fill_2)\n\n            return {\n                id: i,\n                name: el['Pie'],\n                date: parseDate(el['Date served']),\n                alec: el['alec will eat it'],\n                crust: (el['one-crust'] && !el['two crust']) ? 1 : 2,\n                fill_1: fill_1,\n                fill_2: fill_2\n            }\n        })\n\n\n        const pie_container = d3.select(\"#root\").append(\"div\").classed(\"pie_container\", true)\n\n        function drawListOfPies() {\n\n            const format = d3.timeFormat(\"%Y %B\");\n\n            const nested_by_date = d3.nest().key(d => {\n                return format(d.date);\n            }).entries(mydata)\n\n            console.log(\"pie by date\", nested_by_date)\n\n            const month_div = pie_container.selectAll(\"div\").data(nested_by_date).enter().append(\"div\")\n\n            month_div.append(\"div\").classed(\"month_name\", true)\n                .text((d) => {\n                    const formatMonth = d3.timeFormat(\"%Y %B\")\n                    const parseTime = d3.timeParse(\"%Y %B\")\n                    const month = formatMonth(parseTime(d.key))\n                    return month\n                })\n\n            month_div.selectAll(\"div.pie\").data(d => d.values).enter().append(\"span\").classed(\"pie\", true)\n                .text((e) => {\n                    return e.name\n                })\n                .attr(\"class\", (d) => \"pie \" + d.fill_1 + \" \" + d.fill_2 + \" \" + d.mod_fill_1 + \" \" + d.mod_fill_2)\n                .on(\"mouseover\", showDetail)\n                .on(\"mouseout\", hideDetail)\n\n            function showDetail(d) {\n                d3.select(\"#root\").append(\"div\").classed(\"tooltip\", true)\n                    .html(\"crust: \" + d.crust + \"<br>\"\n                        + \"alec: \" + d.alec + \"<br>\"\n                        + \"fill 1: \" + d.fill_1 + \"<br>\"\n                        + \"fill 2: \" + d.fill_2 + \"<br>\")\n                    .style(\"left\", d3.select(this).node().getBoundingClientRect().left + \"px\")\n                    .style(\"top\", d3.select(this).node().getBoundingClientRect().top + 20 + \"px\")\n            }\n\n            function hideDetail(d) {\n                d3.select(\"#root .tooltip\").remove()\n            }\n        }\n\n\n        const nested = d3.nest().key(d => d).rollup(d => d.length).entries(fills)\n            .sort((a, b) => d3.descending(a.value, b.value));\n\n        const popular_fills = nested.slice(0, 7)\n        let popular_fills_names = popular_fills.map(d => d.key)\n\n        const other_fills = nested.slice(8)\n        const other_fills_names = other_fills.map(d => d.key)\n\n\n        mydata.forEach((d) => {\n            d.mod_fill_1 = (!popular_fills_names.includes(d.fill_1)) ? \"Other\" : d.fill_1\n            d.mod_fill_2 = (!popular_fills_names.includes(d.fill_2)) ? \"Other\" : d.fill_2\n        })\n\n        popular_fills_names = popular_fills_names.filter(el => el != \"None\")\n\n        console.log(\"replaced with other\", mydata)\n\n        popular_fills_names.push(\"Other\")\n\n        drawListOfPies()\n\n        const table = []\n        let svg = d3.select(\"#root\").append(\"svg\")\n        svg.attr(\"width\", 500).attr(\"height\", 800)\n        const g_lines = svg.append(\"g\").attr(\"class\", \"lines\"),\n            g_texts = svg.append(\"g\").attr(\"class\", \"texts\")\n\n        popular_fills_names.forEach((fill_1, i) => {\n\n            let xx = 0\n\n            svg.append(\"text\").attr(\"x\", xx * 20).attr(\"y\", i * 40 + 20).text(fill_1).classed(fill_1, true)\n\n            for (var j = i; j <= popular_fills_names.length - 1; j++) {\n\n                const fill_2 = popular_fills_names[j]\n                xx++\n\n                let filter = mydata.filter(el => ((el.mod_fill_1 == fill_1 && el.mod_fill_2 == fill_2) || (el.mod_fill_1 == fill_1 && el.mod_fill_2 == \"None\" && fill_1 == fill_2)))\n                let filter2 = mydata.filter(el => ((el.mod_fill_2 == fill_1 && el.mod_fill_1 == fill_2 && fill_1 != fill_2)))\n\n                g_texts.append(\"circle\")\n                    .attr(\"r\", 10)\n                    .attr(\"cx\", xx * 20 + 60 + 5)\n                    .attr(\"cy\", i * 20 + j * 20 + 20 - 5)\n                    .attr(\"fill\", \"white\")\n\n                g_texts.append(\"text\")\n                    .attr(\"x\", xx * 20 + 60)\n                    .attr(\"y\", i * 20 + j * 20 + 20)\n                    .text(filter.length + filter2.length)\n                    .classed(\"row_\" + fill_1, true)\n                    .classed(\"col_\" + fill_2, true)\n\n                table.push({\n                        fill_1: fill_1,\n                        fill_2: fill_2,\n                        count: filter.length + filter2.length\n                    }\n                )\n            }\n\n            g_lines.append(\"line\")\n                .attr(\"x1\", 85)\n                .attr(\"y1\", i * 40 + 15)\n                .attr(\"x2\", xx * 20 + 85 - 15)\n                .attr(\"y2\", i * 20 + j * 20)\n                .attr(\"stroke\", \"green\")\n                .attr(\"class\", fill_1)\n\n            g_lines.append(\"line\")\n                .attr(\"x1\", 85)\n                .attr(\"y1\", i * 40 + 15)\n                .attr(\"x2\", (i) * 20 + 85)\n                .attr(\"y2\", i * 40 + 15 - (7 - xx) * 20)\n                .attr(\"stroke\", \"blue\")\n                .attr(\"class\", fill_1)\n\n        })\n        popular_fills_names.forEach((fill_1, i) => {\n            console.log(fill_1)\n            svg.selectAll(\"text.\" + fill_1).on(\"mouseover\", function () {\n\n                console.log(\"hover\", d3.select(this).attr(\"class\"))\n\n                svg.selectAll(\"text\").attr(\"fill\", \"black\")\n                d3.select(this).attr(\"fill\", \"red\")\n\n                svg.selectAll(\"text.col_\" + d3.select(this).attr(\"class\")).attr(\"fill\", \"red\")\n                svg.selectAll(\"text.row_\" + d3.select(this).attr(\"class\")).attr(\"fill\", \"red\")\n\n                g_lines.selectAll(\"line\").attr(\"stroke-width\", 1)\n                g_lines.selectAll(\"line.\" + d3.select(this).attr(\"class\")).attr(\"stroke-width\", 4)\n\n                pie_container.selectAll(\"span\").style(\"color\", \"black\")\n\n                pie_container.selectAll(\"span.\" + d3.select(this).attr(\"class\")).style(\"color\", \"red\")\n\n            })\n                .on(\"mouseout\", function () {\n                    svg.selectAll(\"text\").attr(\"fill\", \"black\")\n                    g_lines.selectAll(\"line\").attr(\"stroke-width\", 1)\n                    pie_container.selectAll(\"span\").style(\"color\", \"black\")\n\n                })\n        })\n\n        console.log(\"working array\", mydata)\n        console.log(\"nest\", nested)\n        console.log(\"table\", table)\n\n*/\n    //});\n    const drawListOfPies = (data) =>{\n\n        let pie_container = d3.select(pieContainer_ref.current)\n\n        const format = d3.timeFormat(\"%Y %B\");\n\n        const nested_by_date = d3.nest().key(d => {\n            return format(d.date);\n        }).entries(data)\n\n        //console.log(\"pie by date\", nested_by_date)\n\n        const month_div = pie_container.selectAll(\"div\").data(nested_by_date).enter().append(\"div\")\n\n        month_div.append(\"div\").classed(\"month_name\", true)\n            .text((d) => {\n                const formatMonth = d3.timeFormat(\"%Y %B\")\n                const parseTime = d3.timeParse(\"%Y %B\")\n                const month = formatMonth(parseTime(d.key))\n                return month\n            })\n\n        month_div.selectAll(\"div.pie\").data(d => d.values).enter().append(\"span\").classed(\"pie\", true)\n            .text((e) => {\n                return e.name\n            })\n            .attr(\"class\", (d) => \"pie \" + d.fill_1 + \" \" + d.fill_2 + \" \" + d.mod_fill_1 + \" \" + d.mod_fill_2+ \" \" + activeClass(d.fill_1, d.fill_2))\n            .on(\"mouseover\", showDetail)\n            .on(\"mouseout\", hideDetail)\n\n\n\n        function showDetail(d) {\n            d3.select(\"#root\").append(\"div\").classed(\"tooltip\", true)\n                .html(\"crust: \" + d.crust + \"<br>\"\n                    + \"alec: \" + d.alec + \"<br>\"\n                    + \"fill 1: \" + d.fill_1 + \"<br>\"\n                    + \"fill 2: \" + d.fill_2 + \"<br>\")\n                .style(\"left\", d3.select(this).node().getBoundingClientRect().left + \"px\")\n                .style(\"top\", d3.select(this).node().getBoundingClientRect().top + 20 + \"px\")\n        }\n\n        function hideDetail(d) {\n            d3.select(\"#root .tooltip\").remove()\n        }\n\n    }\n\n\n\n    const handleSelectedFill = (value) =>{\n        setSelectedFill(value)\n\n    }\n\n    const activeClass = (f1,f2) =>{\n\n        if (f1===selectedFill || f2===selectedFill)\n            {//console.log(f1,f2,selectedFill)\n            return \"activeItem\"}\n        return \"unactiveItem\"\n    }\n\n    return (<div>\n            <div className=\"left_side\">\n                <div className=\"sticky_top\">\n                <h1>The Pie Chart</h1>\n                <h2>The pies proudly eaten by the Stamen team</h2>\n\n                    <Triangle data={data} fills={fills} selectedFill={handleSelectedFill}/>\n\n                </div>\n                <div className=\"unsticky\" />\n                <div className=\"sticky_bottom\">\n                    <div className=\"footer\">\n                        Made by <a href=\"https://kmpny.github.io\">Kompany</a>, <a href=\"https://docs.google.com/spreadsheets/d/1npXQKNySYcRpiwp3-Iug3ncmCUS9F813LoxZQzSbVLU/edit#gid=0\">data</a> collected by <a href=\"https://stamen.com\">Stamen</a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"right_side\">\n                <div className=\"pies\" ref={pieContainer_ref}/>\n            </div>\n\n        </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}